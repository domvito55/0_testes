// ------------------- 1) Time Conversion -------------------------

function timeConversion(s: string): string {
  // Write your code here
  // let arr = s.split(":")
  // let hour = Number.parseInt(arr[0])

  // if (arr[2].charAt(2).toLowerCase() === 'a'){
  //   hour === 12 ? hour -= 12 : hour;
  // } else {
  //   hour === 12 ? hour : hour += 12;
  // }
  // arr[2] = arr[2].slice(0, 2)
  // arr[0] = hour.toString().padStart(2, '0')
  
  // let result = arr.join(":")
  // return result

    let components = 
    s.match(/(\d{2}):(\d{2}):(\d{2})(AM|PM)/) || [];
    let hour = Number.parseInt(components[1]);
  
  if (components[4].toLowerCase() === 'am'){
    hour === 12 ? hour -= 12 : hour;    
  } else {
    hour === 12 ? hour : hour += 12;        
  }
  console.log(hour)
  components[1] = hour.toString().padStart(2,'0');
  
  return components.slice(1,4).join(":")


}

// ------------------- *) Functional Paradigm -------------------------

function createCouter(count: number) {
  return {
    increment: function (){
      count++;
    },
    currentCount: function(){
      return count;
    }
  }
}


// ####################### 2) Flipping Matrix ################################
function flippingMatrix(matrix: number[][]): number {
    // Write your code here
    let n = matrix.length / 2;
    let sum = 0;
    for (let i = 0; i < n; i++){
      for (let j = 0; j < n; j++){
        let maxElement = Math.max(
                                matrix[i][j],
                                matrix[i][(2*n - 1) - j],
                                matrix[(2*n - 1) - i][j],
                                matrix[(2*n - 1) - i][(2*n - 1) - j]
                              )
        sum += maxElement
      }
    }
    return sum;
}

// ------------------- 2.1) Diagonal Difference -------------------------
function diagonalDifference(arr: number[][]): number {
    // Write your code here
  let mainSum = 0
  let reverseSum = 0
  for (let i = 0; i < arr.length; i++){
    for (let j = 0; j < arr.length; j++){
      if (i === j){
        mainSum += arr[i][j]
      }
      if (j === ((arr.length - 1) - i)){
        console.log(i, j, arr[i][j])
        reverseSum += arr[i][j]
      }
    }
  }
  console.log(mainSum)
  console.log(reverseSum)
  let result = Math.abs(mainSum - reverseSum)
  return result

}


// ######################### 3) Palindrome #########################
// function isPalindrome(s: string){
//   let half = s.length/2
//   for(let i = 0; i < half; i++){
//     // console.log(`${s[i]}, ${s[(s.length-1) - i]}`)
//     if(s[i] !== s[(s.length-1) - i]) return false;
//   }
//   return true;
// }

// function palindromeIndex(s: string): number {
    // Write your code here
    // if (isPalindrome(s)) return -1
    // for(let i = 0; i < s.length; i++){
    //   let end = s.slice(i+1);
    //   let start = s.slice(0,i);
    //   let newWord = start.concat(end);
    //   // console.log(`${i} newword: ${newWord}`)
    //   if (isPalindrome(newWord)) return i
    // }
    // return -1

  // ---
//   let half = s.length/2
//   for(let i = 0; i < half; i++){
//     if(s[i] !== s[(s.length-1) - i]){
//       let newWord = s.slice(i+1, s.length - i)
//       half = newWord.length/2
//       for(let j = 0; j < half; j++){
//         if(s[j] !== s[(s.length-1) - j]){
//           return -1
//         }
//         return i
//       }

//     }
//   }
//   return -1
// }

function difference(s: string): number{
  let half = s.length/2
  for(let i = 0; i < half; i++){
    if(s[i] !== s[(s.length-1) - i]) return i;
  }
  return -1;
}

function palindromeIndex(s: string): number {
  let index = difference(s)
  if(index === -1) return index

  let rigthWord = s.slice(index+1, s.length - index)
  if(difference(rigthWord) === -1) return index

  let leftWord = s.slice(index, (s.length-1) - index)
  if(difference(leftWord) === -1) return ((s.length-1) - index)

  return -1
}


function palindromeIndex2(s: string): number {
  const n = s.length;
  
  // Check characters from both ends moving inward
  for (let i = 0, j = n - 1; i < j; i++, j--) {
    // If characters don't match
    if (s[i] !== s[j]) {
      // Try removing character at position i
      if (isPalindromeRange(s, i + 1, j)) {
        return i;
      }
      
      // Try removing character at position j
      if (isPalindromeRange(s, i, j - 1)) {
        return j;
      }
      
      // If neither removal works, no solution
      return -1;
    }
  }
  
  // String is already a palindrome
  return -1;
  
  // Helper function to check if a range is a palindrome
  function isPalindromeRange(str: string, start: number, end: number): boolean {
    while (start < end) {
      if (str[start] !== str[end]) return false;
      start++;
      end--;
    }
    return true;
  }
}

// ------------------------ 3.2) Tower Breaker ################################
function towerBreakers(n: number, m: number): number {
    // Write your code here
  if (n === 1) return 1
  if ((n % 2) === 0) return 2
  if ((n % 2) !== 0) {
    let limit = Math.round(Math.sqrt(m))
    let factors = []
    
    for(let i = 1; i <= limit; i++){
      if((m % i) === 0){
        factors.push(i)
        if(i !== m/i){
          factors.push(m/i)
        }
      }
    }
    console.log(factors.sort((a, b) => a-b))
    if(((factors.length-1) % 2) === 0) return 2
    return 1
  }
  return 0

}

// -------------------- 3.3) CesarCipher --------------------------------
function caesarCipher(s: string, k: number): string {
    // Write your code here
  let a = 'a'.charCodeAt(0)
  let z = 'z'.charCodeAt(0)
  let A = 'A'.charCodeAt(0)
  let Z = 'Z'.charCodeAt(0)
  
  let array = s.split("")
  array = array.map(
    (char) => {
      if(char >= 'a' && char <= 'z'){
        return (
          String.fromCharCode(
            a + ((char.charCodeAt(0)-a+k)%(z+1-a))
          )
        )
      }
      if(char >= 'A' && char <= 'Z'){
        return (
          String.fromCharCode(
            A + ((char.charCodeAt(0)-A+k)%(Z+1-A))
          )
        )
      }
      return char
    }
  )
  return array.join("")
}


// ############################# 4) TRUCK #############################
// function isPossible(petrolpumps: number[][], current: number, sPetrol: number, sDistance: number, missing: number, max: number){
//   // console.log(`  ${current}, ${missing}`)
//   let totalPetrol = petrolpumps[current][0] + sPetrol
//   let totalDistance = petrolpumps[current][1] + sDistance

//   if(totalPetrol < totalDistance) return false
//   if(missing > 0){
//     let next = (current + 1)
//     if (next >= max) next -= max
//     return isPossible(petrolpumps, next, totalPetrol, totalDistance, missing - 1, max)
//   }
//   return true
// }

// function truckTour(petrolpumps: number[][]): number {
//     // Write your code here
//     for(let i = 0; i < petrolpumps.length; i++){
//     //  console.log(`i: ${i}`)
//       if(isPossible(petrolpumps, i, 0, 0, petrolpumps.length - 1, petrolpumps.length)) return i
//     }
//     return -1
// }

function truckTour(petrolpumps: number[][]): number {
  // Write your code here
  let maxSize = petrolpumps.length
  for(let i = 0; i < petrolpumps.length; i++){
    let petrol = petrolpumps[i][0]
    let distance = petrolpumps[i][1]
    let notValid = false
    for(let j = i+1; j < maxSize; j++){
      if (i == 72){
        console.log("a", j, petrol-distance)
      }
      if(petrol > distance){
        petrol += petrolpumps[j][0]
        distance += petrolpumps[j][1] 
      } else {
        notValid = true
        break
      }
    }
    if(!notValid){
      for(let j = 0; j < i; j++){
        if (i == 72){
          console.log("b", j, petrol-distance)
        }
        if(petrol > distance){
          petrol += petrolpumps[j][0]
          distance += petrolpumps[j][1] 
        } else {
          notValid = true
          break
        }
      }
      if(!notValid){
        return i
      }
    }
  }
  return -1
}

function truckTour2(petrolpumps: number[][]): number {
  const n = petrolpumps.length;
  
  // Try each starting point
  for (let start = 0; start < n; start++) {
    let currentFuel = 0;
    let canComplete = true;
    
    // Try to complete the circle starting from this pump
    for (let i = 0; i < n; i++) {
      // Get the current pump (with wrapping)
      const currentPumpIndex = (start + i) % n;
      const [fuel, distance] = petrolpumps[currentPumpIndex];
      
      // Add fuel and subtract distance
      currentFuel += fuel - distance;
      
      // If we run out of fuel, this starting point won't work
      if (currentFuel < 0) {
        canComplete = false;
        break;
      }
    }
    
    // If we completed the circle, return this starting point
    if (canComplete) {
      return start;
    }
  }
  
  // This should not happen with the given constraints
  return -1;
}

function truckTour3(petrolpumps: number[][]): number {
  const n = petrolpumps.length;
  let start = 0;
  let totalFuel = 0;
  let currentFuel = 0;
  
  for (let i = 0; i < n; i++) {
    const [fuel, distance] = petrolpumps[i];
    const diff = fuel - distance;
    
    // Add to current fuel
    currentFuel += diff;
    totalFuel += diff;
    
    // If we run out of fuel
    if (currentFuel < 0) {
      // Start from the next station
      start = i + 1;
      currentFuel = 0;
    }
  }
  
  // If total fuel is negative, it's impossible to complete the circle
  // But problem states there will be a solution
  return totalFuel >= 0 ? start : -1;
}

// ############################
/*
 * Complete the 'bfs' function below.
 *
 * The function is expected to return an INTEGER_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. INTEGER m
 *  3. 2D_INTEGER_ARRAY edges
 *  4. INTEGER s
 */

function bfs(n: number, m: number, edges: number[][], s: number): number[] {
  // Write your code here
  let graph = new Map<number, Set<number>>()
  
  for(let i = 0; i < n; i++){
      graph.set(i, new Set())
  }
  
  edges.forEach(
      (edge) => {
          graph.get(edge[0])?.add(edge[1])
          graph.get(edge[1])?.add(edge[0])
      }
  )

  let result: number[] = Array(n).fill(-1)
  let queue: number[][] = []
  queue.push([s,0])
  let visited = new Set<number>()
  visited.add(s)
  
  while(queue.length > 0){
    let [current, currentLevel] = queue.shift()!
    result[current-1] = currentLevel*6

    graph.get(current)?.forEach(
      neighbor => {
        if(!visited.has(neighbor)){
          queue.push([neighbor, currentLevel+1])
          visited.add(neighbor)
        }
      }
    )

  }
  result.splice(s-1,1)
  return result
}

function bfs2(n: number, m: number, edges: number[][], s: number): number[] {
  // Create adjacency list representation of the graph
  const graph: number[][] = new Array(n + 1).fill(0).map(() => []);
  
  // Build the adjacency list
  for (let i = 0; i < m; i++) {
    const [u, v] = edges[i];
    graph[u].push(v);
    graph[v].push(u); // Add both directions since it's an undirected graph
  }
  
  // Initialize distances array with -1 (unreachable)
  const distances: number[] = new Array(n + 1).fill(-1);
  
  // Distance to start node is 0
  distances[s] = 0;
  
  // Queue for BFS, starting with the start node
  const queue: number[] = [s];
  
  // BFS traversal
  while (queue.length > 0) {
    const current = queue.shift()!;
    
    // Explore all neighbors
    for (const neighbor of graph[current]) {
      // If this node hasn't been visited yet
      if (distances[neighbor] === -1) {
        // Distance to neighbor is distance to current + edge weight (6)
        distances[neighbor] = distances[current] + 6;
        queue.push(neighbor);
      }
    }
  }
  
  // Create result array excluding the start node
  const result: number[] = [];
  for (let i = 1; i <= n; i++) {
    if (i !== s) {
      result.push(distances[i]);
    }
  }
  
  return result;
}

function bfs3(n: number, m: number, edges: number[][], s: number): number[] {
  // Write your code here
  let graph = new Map<number, Set<number>>()
  
  for(let i = 0; i < n; i++){
      graph.set(i, new Set())
  }
  
  edges.forEach(
      (edge) => {
          graph.get(edge[0])?.add(edge[1])
          graph.get(edge[1])?.add(edge[0])
      }
  )

  let result: number[] = Array(n).fill(-1)
  let queue: number[][] = []
  queue.push([s,0])
  result[s-1] = 0
  
  while(queue.length > 0){
    let [current, currentLevel] = queue.shift()!

    graph.get(current)?.forEach(
      neighbor => {
        if(result[neighbor-1] === -1){
          queue.push([neighbor, currentLevel+1])
          result[neighbor-1] = (currentLevel+1)*6
        }
      }
    )

  }
  result.splice(s-1,1)
  return result
}

function bfs4(n: number, m: number, edges: number[][], s: number): number[] {
  // Write your code here
  let graph = new Map<number, Set<number>>()
  
  for(let i = 0; i < n; i++){
      graph.set(i, new Set())
  }
  
  edges.forEach(
      (edge) => {
          graph.get(edge[0])?.add(edge[1])
          graph.get(edge[1])?.add(edge[0])
      }
  )

  let queue: number[] = []
  queue.push(s)
  let result: number[] = Array(n).fill(-1)
  result[s-1] = 0
  
  while(queue.length > 0){
    let current = queue.shift()!

    graph.get(current)?.forEach(
      neighbor => {
        if(result[neighbor-1] === -1){
          queue.push(neighbor)
          result[neighbor-1] = result[current-1] + 6
        }
      }
    )

  }
  result.splice(s-1,1)
  return result
}

function bfs5(n: number, m: number, edges: number[][], s: number): number[] {
  // Write your code here
  let graph = new Map<number, Set<number>>()
    
  edges.forEach(
      (edge) => {
        if(graph.has(edge[0]))
          graph.get(edge[0])!.add(edge[1])
        else
          graph.set(edge[0], new Set([edge[1]]))
        if(graph.has(edge[1]))
          graph.get(edge[1])!.add(edge[0])
        else
          graph.set(edge[1], new Set([edge[0]]))
      }
  )

  let queue: number[] = []
  queue.push(s)
  let result: number[] = Array(n).fill(-1)
  result[s-1] = 0
  
  while(queue.length > 0){
    let current = queue.shift()!

    graph.get(current)?.forEach(
      neighbor => {
        if(result[neighbor-1] === -1){
          queue.push(neighbor)
          result[neighbor-1] = result[current-1] + 6
        }
      }
    )

  }
  result.splice(s-1,1)
  return result
}

// ########################### MAIN ###############################
function main() {
  for(let char of 'asdf'){
    console.log(char)
  }
  let a = 'a'.charCodeAt(0)
  let z = 'z'.charCodeAt(0)
  let x = String.fromCharCode(a + (z-a+3) % (z-a))
  console.log(x.match(/[A-Z]/))
  // let test = [
  //   [1, 2],
  //   [2, 3],
  //   [2, 4],
  //   [3, 5]
  // ]

  // test = [
  //   [162,462],[51,72],[189,25],[36,174],[345,369],[129,35],[177,24],[381,385],[21,216],[288,31],[1,70],[42,35],[87,220],[447,157],[210,185],[135,67],[168,79],[462,363],[195,58],[267,410],[147,197],[315,186],[30,85],[378,126],[360,470],[339,388],[438,408],[84,99],[3,373],[63,346],[102,421],[174,28],[414,1],[81,345],[375,233],[69,141],[243,431],[282,438],[435,125],[153,104],[300,379],[291,24],[180,95],[225,84],[471,162],[138,269],[276,444],[423,336],[345,98],[468,458],[456,145],[315,193],[333,337],[147,10],[45,181],[27,174],[63,186],[117,387],[342,355],[411,258],[9,438],[285,298],[270,83],[45,106],[54,34],[111,377],[81,156],[444,114],[21,5],[12,135],[18,108],[78,196],[255,43],[237,245],[135,246],[327,454],[168,294],[243,100],[360,321],[78,253],[228,292],[330,149],[78,351],[66,96],[390,231],[285,116],[297,433],[177,97],[267,14],[33,368],[291,336],[162,63],[108,279],[81,279],[420,405],[423,168],[12,190],[453,357],[183,274],[288,403],[426,164],[1,68],[114,311],[216,94],[39,387],[162,196],[3,409],[339,421],[72,458],[135,227],[36,111],[48,2],[240,273],[207,407],[135,308],[276,468],[45,266],[420,202],[177,412],[186,353],[63,248],[39,379],[57,419],[315,167],[180,166],[429,25],[183,5],[264,344],[150,275],[141,167],[270,295],[303,150],[459,417],[276,358],[147,263],[435,450],[426,338],[441,237],[216,45],[468,237],[291,76],[231,332],[117,242],[471,30],[441,41],[384,199],[468,154],[108,434],[12,138],[192,106],[120,70],[174,114],[141,356],[66,138],[387,134],[375,296],[366,261],[357,118],[123,137],[99,439],[162,117],[276,318],[453,458],[186,427],[345,84],[114,194],[186,339],[153,65],[231,387],[390,192],[270,186],[393,206],[123,99],[123,237],[153,99],[75,7],[417,88],[378,93],[321,197],[396,306],[378,315],[27,276],[228,217],[375,116],[45,428],[90,133],[177,466],[273,348],[288,394],[60,449],[372,255],[3,74],[168,277],[126,377],[414,434],[351,172],[327,427],[309,100],[249,341],[309,346],[393,223],[408,384],[237,96],[156,302],[201,426],[111,57],[261,314],[453,461],[330,326],[303,91],[123,376],[84,441],[402,16],[354,469],[60,124],[267,163],[153,18],[354,156],[291,72],[390,130],[63,454],[90,132],[39,460],[54,399],[222,261],[465,408],[6,145],[330,258],[411,252],[159,57],[93,253],[33,126],[423,418],[171,74],[114,13],[171,42],[81,56],[186,172],[210,105],[309,263],[360,337],[36,247],[360,82],[459,352],[288,31],[192,24],[24,43],[303,359],[369,133],[450,380],[219,215],[351,295],[219,470],[261,452],[186,405],[138,118],[327,79],[318,263],[54,12],[348,63],[129,418],[147,311],[432,435],[99,62],[282,258],[54,222],[474,74],[363,384],[207,407],[342,28],[141,426],[117,219],[285,232],[144,364],[414,407],[348,1],[414,211],[471,210],[132,44],[267,112],[93,123],[240,317],[255,302],[84,446],[351,46],[459,442],[111,154],[381,467],[177,265],[99,205],[456,1],[174,219],[222,134],[165,174],[186,72],[402,263],[216,123],[327,411],[54,475],[75,53],[426,434],[141,394],[417,340],[177,80],[381,267],[144,255],[411,351],[249,56],[444,311],[186,44],[33,101],[111,77],[300,437],[222,221],[6,128],[192,449],[408,251],[474,470],[69,233],[168,108],[369,315],[366,42],[372,452],[267,190],[393,414],[273,40],[45,397],[45,228],[93,445],[459,128],[303,8],[303,447],[126,43],[6,160],[201,120],[33,448],[378,120],[9,237],[381,207],[396,277],[201,226],[384,119],[474,122],[408,306],[273,388],[375,125],[390,221],[243,99],[297,256],[186,245],[141,384],[54,233],[144,13],[1,440],[318,414],[426,45],[117,268],[3,337],[384,162],[447,103],[471,18],[414,70],[318,374],[366,328],[420,178],[1,417],[357,61],[297,39],[51,202],[234,86],[420,84],[168,299],[420,262],[279,369],[33,44],[180,296],[57,29],[9,313],[297,165],[339,179],[69,442],[369,339],[465,142],[474,266],[318,200],[279,290],[96,72],[204,121],[216,432],[57,114],[9,197],[69,427],[357,309],[372,356],[1,87],[18,59],[462,349],[399,370],[267,121],[294,372],[327,110],[291,1],[276,238],[441,282],[48,277],[129,155],[99,414],[165,291],[6,382],[33,267],[261,55],[267,447],[30,265],[402,21],[144,48],[168,5],[225,183],[60,177],[57,142],[252,177],[312,238],[468,109],[84,412],[237,77],[405,31],[252,97],[135,61],[180,273],[309,347],[270,82],[216,192],[402,45],[261,218],[174,80],[69,264],[141,172],[126,422],[78,203],[156,245],[315,240],[1,106],[15,234],[102,274],[294,292],[66,187],[411,136],[411,269],[360,342],[252,46],[402,27],[315,177],[366,464],[438,459],[459,170],[150,287],[459,453],[387,174],[327,447],[294,30],[81,342],[429,314],[414,462],[447,77],[375,63],[327,86],[357,436],[282,219],[315,97],[390,115],[360,395],[45,10],[249,220],[417,422],[270,365],[120,155],[441,426],[30,215],[330,157],[399,311],[315,84],[186,138],[381,29],[432,217],[78,65],[99,464],[423,44],[300,364],[177,4],[261,201],[15,77],[69,239],[402,137],[285,444],[321,179],[126,430],[420,251],[417,398],[450,132],[135,448],[147,202],[426,220],[330,181],[87,475],[84,217],[348,429],[249,238],[228,285],[264,275],[114,24],[183,56],[21,422],[420,204],[366,140],[243,65],[69,324],[231,266],[204,35],[84,329],[435,42],[354,211],[183,352],[309,60],[273,26],[465,269],[462,358],[198,464],[426,248],[174,102],[168,323],[333,80],[369,376],[372,411],[300,470],[441,353],[381,279],[276,116],[342,195],[48,78],[102,78],[96,37],[60,290],[429,179],[36,71],[252,382],[198,438],[378,250],[336,228],[453,268],[453,171],[429,455],[147,421],[72,74],[399,90],[384,220],[162,150],[168,287],[258,449],[183,345],[201,465],[15,203],[261,112],[453,260],[228,429],[393,75],[222,150],[306,95],[435,350],[300,58],[225,405],[384,380],[303,276],[369,451],[459,410],[168,58],[240,298],[81,197],[114,162],[195,385],[252,269],[249,12],[18,219],[204,110],[72,268],[153,83],[300,95],[444,44],[189,345],[453,362],[447,301],[123,180],[288,282],[339,239],[162,154],[471,190],[336,69],[444,153],[282,257],[72,273],[378,318],[57,442],[234,136],[282,459],[318,212],[63,6],[123,273],[117,120],[219,375],[267,364],[309,131],[84,418],[216,209],[177,285],[336,20],[303,347],[327,243],[468,273],[444,103],[219,229],[165,138],[216,365],[444,467],[345,224],[120,112],[186,283],[294,390],[333,5],[366,118],[45,436],[237,354],[471,307],[360,435],[336,300],[273,36],[147,363],[468,77],[369,314],[339,378],[18,337],[81,307],[78,307],[168,33],[243,361],[240,115],[462,347],[267,74],[66,340],[264,222],[96,458],[456,118],[366,181],[36,421],[423,430],[216,327],[30,41],[243,309],[243,423],[99,95],[396,221],[177,1],[408,130],[294,410],[48,28],[57,176],[444,353],[219,291],[51,287],[474,350],[291,260],[177,181],[306,219],[414,239],[234,419],[144,173],[273,118],[465,467],[183,316],[246,345],[198,355],[165,233],[339,351],[372,279],[60,437],[378,318],[471,465],[87,397],[147,289],[138,177],[120,403],[117,2],[294,216],[372,144],[459,17],[45,298],[354,132],[330,110],[309,61],[429,396],[165,242],[210,113],[378,106],[141,26],[270,252],[324,257],[51,402],[411,394],[396,414],[309,336],[372,325],[330,342],[135,427],[219,196],[300,324],[246,268],[342,366],[426,288],[207,282],[399,20],[237,328],[234,107],[3,237],[174,148],[24,110],[309,9],[96,461],[339,191],[264,172],[144,263],[99,108],[468,141],[201,20],[63,167],[111,131],[84,397],[462,231],[87,233],[12,371],[351,207],[165,1],[171,362],[84,170],[453,420],[339,271],[348,51],[444,294],[426,143],[81,306],[201,87],[240,229],[21,344],[150,376],[105,394],[339,468],[309,108],[9,434],[333,300],[465,299],[315,43],[15,168],[336,95],[54,3],[99,56],[306,308],[141,462],[15,393],[57,133],[312,121],[459,167],[240,468],[444,131],[162,277],[258,248],[21,424],[288,329],[417,244],[381,357],[45,429],[60,262],[75,258],[204,452],[159,440],[351,36],[162,474],[228,401],[384,230],[105,315],[270,155],[84,201],[198,286],[39,423],[225,305],[441,276],[264,219],[435,209],[216,30],[432,51],[213,259],[60,350],[66,34],[66,327],[288,132],[24,117],[441,318],[375,201],[93,133],[6,343],[402,135],[123,100],[234,88],[207,447],[243,405],[339,148],[261,383],[15,325],[288,444],[153,460],[366,228],[33,425],[300,318],[408,379],[465,14],[339,368],[201,207],[156,173],[375,309],[120,331],[102,28],[255,396],[159,308],[474,42],[273,375],[453,440],[90,255],[291,244],[411,49],[417,84],[195,298],[45,52],[471,264],[240,43],[237,238],[399,424],[240,352],[318,111],[111,155],[435,318],[405,160],[192,89],[330,29],[441,239],[237,448],[303,414],[210,83],[351,132],[444,145],[204,23],[219,232],[291,94],[12,335],[192,235],[429,335],[180,411],[249,462],[153,19],[201,121],[78,23],[321,136],[306,18],[354,287],[411,293],[228,142],[36,399],[279,437],[240,288],[102,319],[21,375],[342,222],[261,327],[27,7],[396,301],[387,183],[345,404],[222,444],[279,174],[243,402],[309,139],[42,53],[258,351],[318,92],[234,387],[375,170],[375,229],[117,51],[348,451],[354,19],[156,259],[30,108],[366,295],[33,424],[249,306],[318,432],[300,216],[162,249],[435,60],[39,22],[27,397],[204,307],[90,408],[300,470],[273,450],[384,262],[288,255],[411,456],[117,399],[222,456],[459,156],[9,300],[279,11],[285,364],[135,273],[198,133],[303,201],[168,80],[408,350],[300,131],[306,250],[93,117],[432,233],[321,132],[12,286],[102,67],[75,238],[120,8],[312,95],[306,251],[147,1],[171,255],[78,59],[339,258],[288,406],[24,460],[75,367],[279,263],[348,91],[66,245],[369,239],[261,68],[369,432],[201,318],[276,98],[285,218],[132,4],[264,19],[42,344],[156,275],[447,268],[291,311],[12,152],[279,84],[300,145],[177,131],[192,323],[132,63],[84,434],[174,350],[432,238],[432,195],[144,24],[114,399],[165,183],[429,377],[468,226],[291,159],[369,257],[276,95],[147,200],[438,270],[159,239],[282,111],[15,223],[240,343],[444,288],[66,444],[255,128],[12,149],[306,11],[123,311],[261,270],[447,361],[60,46],[393,192],[300,344],[123,225],[429,72],[294,365],[411,221],[12,455],[189,287],[48,298],[471,467],[192,5],[441,40],[150,284],[33,108],[69,237],[219,432],[102,13],[1,41],[426,201],[270,136],[285,125],[165,351],[123,284],[9,380],[201,22],[441,179],[18,150],[45,445],[456,39],[294,225],[465,457],[189,438],[318,406],[399,36],[240,433],[177,374],[99,19],[27,379],[1,301],[210,383],[192,452],[99,382],[297,84],[54,106],[354,103],[438,349],[111,103],[132,395],[87,294],[408,290],[168,126],[144,400],[237,304],[396,241],[444,65],[468,107],[159,221],[171,109],[372,266],[426,165],[174,409],[339,383],[342,202],[399,182],[348,243],[36,327],[153,231],[351,300],[312,13],[261,38],[243,124],[453,454],[420,323],[309,144],[270,150],[399,277],[357,12],[156,36],[120,31],[150,62],[339,406],[84,3],[441,192],[462,296],[303,33],[21,319],[270,109],[318,414],[60,299],[432,288],[243,316],[321,451],[306,119],[51,414],[87,453],[453,416],[78,467],[420,342],[54,164],[234,406],[396,391],[219,374],[105,212],[138,198],[96,69],[291,273],[9,61],[54,1],[105,216],[330,334],[279,347],[138,448],[282,304],[366,296],[171,332],[72,208],[285,379],[306,406],[312,303],[72,43],[405,131],[375,272],[252,389],[303,262],[354,274],[348,246],[198,58],[327,434],[324,273],[60,152],[216,340],[357,92],[117,263],[471,436],[285,169],[201,59],[450,118],[348,271],[333,322],[54,450],[39,136],[363,293],[243,327],[255,198],[24,206],[138,151],[252,253],[15,318],[324,287],[306,370],[426,79],[159,379],[282,128],[150,109],[180,348],[276,246],[387,93],[189,70],[348,270],[354,147],[447,66],[189,394],[354,146],[387,347],[126,435],[147,168],[54,450],[315,177],[345,473],[69,26],[15,154],[219,74],[339,257],[279,210],[219,105],[414,241],[249,153],[42,355],[63,161],[69,260],[105,310],[333,467],[198,433],[450,83],[168,10],[51,73],[75,430],[258,31],[360,123],[63,247],[465,333],[465,113],[333,310],[246,185],[240,253],[354,367],[360,216],[270,409],[63,89],[462,120],[150,82],[312,31],[186,229],[54,325],[447,396],[264,399],[222,184],[249,21],[141,363],[81,293],[381,407],[297,49],[75,428],[84,56],[180,239],[60,100],[465,225],[39,249],[297,188],[129,309],[36,97],[54,454],[267,231],[468,88],[390,190],[150,447],[90,166],[237,354],[87,368],[282,471],[444,421],[291,425],[255,224],[354,447],[213,157],[144,86],[159,362],[225,129],[99,376],[33,430],[24,122],[474,356],[414,76],[330,81],[372,277],[183,25],[411,456],[198,207],[102,412],[120,156],[105,176],[408,150],[348,166],[408,61],[402,1],[411,197],[75,121],[177,445],[459,241],[372,173],[291,8],[417,35],[198,443],[285,220],[363,51],[75,422],[39,54],[306,177],[324,289],[42,110],[318,316],[42,472],[225,162],[99,244],[156,318],[42,49],[324,351],[468,6],[270,39],[432,351],[75,146],[231,83],[429,262],[240,283],[270,422],[210,213],[417,182],[345,226],[249,161],[129,191],[138,254],[285,466],[288,53],[282,240],[363,133],[117,5],[363,161],[18,198],[438,211],[24,361],[168,308],[21,361],[297,15],[384,4],[402,165],[105,429],[363,385],[378,268],[117,453],[444,137],[15,225],[156,36],[384,460],[189,218],[435,449],[261,218],[375,25],[135,435],[435,299],[435,344],[9,415],[63,226],[348,128],[459,107],[420,252],[87,98],[90,204],[222,302],[147,102],[228,391],[156,223],[216,293],[15,472],[402,365],[456,136],[186,19],[429,194],[183,333],[435,380],[306,394],[321,433],[114,13],[3,124],[465,325],[336,49],[27,417],[216,401],[351,52],[426,58],[339,404],[387,453],[372,182],[294,415],[117,358],[333,197],[132,134],[120,413],[423,67],[456,231],[180,254],[33,398],[318,85],[399,103],[414,139],[69,113],[84,104],[96,380],[204,337],[465,86]  
  // ]

  // let x = bfs(476, test.length, test, 247)
  // let y = bfs2(476, test.length, test, 247)
  // let z = bfs3(476, test.length, test, 247)
  // let a = bfs4(476, test.length, test, 247)
  // let b = bfs5(476, test.length, test, 247)
  // // let x = bfs(6, 4, test, 1)
  // // let y = bfs2(6, 4, test, 1)
  // // console.log(y)
  // x.forEach(
  //   (element, index) => {
  //     if(element !== b[index])
  //     console.log(index, element, y[index], z[index], a[index], b[index])
  //   }
  // )


  // let test = [
  //   [1, 5],
  //   [10, 3],
  //   [3, 4]
  // ]

  // let test = "6352,12787;13129,17300;72374,38672;97868,99865;58225,28774;23955,66347;54552,48633;70252,50634;56423,89956;41312,61163;5834,42149;47528,45640;44282,17199;29781,82024;81576,43999;38946,87927;56785,52074;5227,45511;7097,3094;61727,81673;48220,85681;64371,2771;34313,34622;69756,7087;24577,11068;68249,30410;53216,15776;76049,13850;49326,22181;12225,30901;66180,51170;35180,39316;19595,40406;84826,43043;59851,46552;24715,8070;32232,89085;27192,82896;40058,96948;89982,64634;8015,74582;11395,77582;6710,3796;7783,72387;42328,20007;3288,24859;87528,38467;64175,7122;95224,49000;50164,55074;11904,91230;79496,60487;80314,6687;43383,36723;3634,49716;1356,28000;40650,29103;21934,47359;32898,29716;19745,75225;49723,39384;84,37250;94202,80610;60724,89425;45961,27239;60851,57864;18469,40346;34703,15134;47032,78085;51857,50666;44152,69564;78665,84801;98666,598;48511,47915;46666,68256;39492,96388;23991,55927;49989,18193;36536,10712;23969,82496;37951,1171;56712,72771;41516,91414;87904,4900;85850,39760;55565,46353;25676,50581;31154,24341;67531,96016;88608,14196;80623,28099;26935,4614;84025,76923;39158,36912;3987,79478;19407,58289;80649,92470;31059,22164;83883,35314;43415,86084;91426,15331;32437,17101;65912,63590;57793,49794;59605,46400;63989,56580;90850,90923;61193,91226;84197,16702;28137,4535;96179,63896;79175,76827;56365,26585;15343,56600;61899,58757;42683,53324;74088,75119;86776,56351;55060,44568;6144,31017;7320,86484;87596,98169;93758,65140;5747,77954;81841,33883;98841,78019;14130,78015;71198,70495;4600,2892;43446,66498;61648,86128;36173,52087;61247,22948;24789,32658;83867,47284;63674,91186;33767,51269;5707,27524;32760,11453;21830,14600;61687,20670;8971,75817;98684,80168;62663,19635;83059,6108;2484,61058;92235,38656;29497,69833;77955,70637;2491,78174;17921,82516;69359,51687;50137,91417;79211,82896;19221,1040;97496,80908;38061,22818;73076,53096;2985,35738;72731,2395;58197,75214;79804,50431;30222,25652;36616,8176;96289,55458;86349,14209;37973,72060;65895,88109;79828,61457;87357,99049;78848,1204;96308,16908;24021,85735;70004,43357;37824,42734;62103,96020;34299,41906;62802,64520;67558,99417;89048,80198;54874,91748;94406,9199;80159,76652;97307,59987;38109,84663;75387,33308;85866,88046;50216,26238;73780,36571;69594,11603;95656,31696;7622,29954;89954,70423;10826,73863;86192,99873;54060,41065;91620,64817;50263,88131;41468,63922;48117,95928;64936,39855;29236,67154;27900,79451;93391,1679;32373,79337;13281,28028;11032,37254;57981,985;7676,68806;91199,93867;85030,45258;51284,93002;10074,17898;81132,51542;98171,45600;47469,63107;85454,76704;46612,13353;72506,56354;15031,4878;35690,44663;32905,63074;98268,7238;80410,5943;92395,71609;16162,77425;16866,83797;86778,26940;1694,67909;94833,16217;29860,58653;79323,15313;51709,25934;45017,40566;82287,76399;45444,34329;21061,94700;97402,35680;18289,77811;41622,10684;49419,74135;4460,66285;74283,7589;9576,92329;75497,20760;8545,21708;79412,4219;37020,47472;46504,98388;88038,28790;74786,49833;79470,12198;60884,76871;47877,79173;54682,5850;6208,20452;96337,27019;3088,70619;34607,12663;62947,26455;49774,87843;48162,45538;92061,1533;93009,38564;99920,97398;83706,74705;47230,63175;3254,8114;56398,51130;3638,27431;56979,9845;47882,53315;53215,50970;40286,87821;79984,19584;14275,29758;7427,62436;91647,99487;80320,84655;54403,80239;82053,38108;71295,45634;17634,74548;70099,74031;25677,73736;1461,99007;99932,49343;68674,53146;16664,8959;40966,96647;44894,55240;42756,52320;34027,34402;68159,14346;35409,22561;10936,33813;77020,82230;79446,94653;56777,65897;68684,98805;39632,70144;14164,39564;35838,82837;92709,52501;8147,50027;65500,53040;21618,24607;21712,71997;75361,6222;86342,27121;28782,13630;60933,5801;95859,56730;16805,68988;22626,85488;67792,78610;71984,98307;34525,7821;81143,27233;76674,5641;93611,58525;75033,15229;83131,96744;87225,58491;2965,89918;85611,48098;3547,62895;70250,15758;35977,87054;84745,58602;88894,68888;53563,60877;67195,88087;85049,64689;31672,78074;70330,25282;36598,45362;56862,19729;58457,44086;94571,77773;50356,96534;25870,70254;75780,12471;86011,11756;99524,87107;86710,4769;55995,40272;81997,39541;44711,67046;4229,76382;45119,90910;1663,81717;52623,58525;17797,27431;18962,28719;5203,85669;25252,47424;55923,1032;59894,41933;29139,75770;45392,15848;96890,17738;72472,78887;57278,17182;45932,77858;9915,7402;68768,11577;5470,37742;86453,23266;65173,21767;51985,86727;7435,93588;34151,79709;10971,10396;37994,40110;2517,83385;72309,99407;1122,61132;78293,58399;94665,40576;52608,4579;47977,37727;32508,53447;75469,18960;93064,56993;57078,61400;43719,80865;54988,94221;60573,82310;20969,98566;38771,23485;81950,27432;22891,99423;88563,17535;74173,99580;58110,26781;4158,22439;64507,36665;92237,56327;71977,85300;13319,45406;63052,73390;26270,34391;83962,86843;16700,4930;1760,71823;28415,83710;99254,67657;99484,4168;85192,73657;3747,59653;437,24257;82091,64943;77273,74327;37622,49249;75979,50940;11007,39030;40681,37276;89772,24643;40470,6471;29572,42230;78293,74338;42291,93898;58347,41774;98066,59890;15430,18164;19542,15866;42420,17985;97161,19693;8663,34782;85293,84641;2073,96299;40022,42754;33575,29793;83748,90396;52616,13319;32625,47260;4009,74915;41158,62355;16689,39223;22244,32118;57386,58137;64336,16158;76121,77848;35850,84784;28981,21142;85776,47405;33793,42150;90158,83719;88294,90257;74114,57261;19928,6739;4521,23936;81653,45678;2642,14693;1252,24885;63163,74989;83021,27498;91146,75494;21697,43347;76629,50677;80841,78756;98081,14633;37257,4591;98351,25551;94847,72464;82811,14774;79202,3683;55061,77207;65712,57702;91899,83315;98938,71413;74656,98311;98910,65801;73804,36958;25500,66784;87634,6340;45539,2067;20972,82796;23009,35674;24698,17855;8137,23860;48981,3691;43895,20393;97249,9606;78095,89147;9273,77032;76912,83928;75342,75821;66080,65497;29131,91579;48632,16764;14270,94171;35182,35241;93318,58190;87266,34367;76045,95403;74578,41377;15445,18472;61769,12693;44430,56215;18191,53702;49599,95102;37629,24940;87275,3708;6789,16405;95287,55420;49520,9556;65942,84702;61149,75611;42891,48414;9977,35287;60168,84555;93015,91964;3026,54784;4656,47455;27350,22847;1156,76948;34300,55136;18240,21574;58844,25028;54330,70482;96799,3850;96389,62741;88551,57537;54703,31441;22303,64680;83080,98822;65586,76094;90786,84963;47229,11793;48770,74579;50991,66277;51526,85291;21413,86117;23216,80256;27496,77546;50737,24295;97747,63477;3387,86297;21014,58089;34089,59668;39120,17168;74841,4705;9614,81978;89668,56842;10123,38437;47772,61113;4713,15650;62755,26125;1766,2323;22732,29262;96220,89820;53556,93966;53297,73294;80262,90662;31382,30702;66681,70502;64222,57873;75206,73835;39851,81225;47028,49973;19661,94800;27437,40726;10449,90192;83202,12214;8866,5934;41475,5085;95753,11382;99050,65401;84675,95663;56062,32409;26364,39094;19262,90585;96967,10819;80771,36817;92044,27799;3141,11704;38950,46929;68781,49398;53472,51983;77963,62337;57916,35790;67421,70020;47171,66470;51773,48198;62132,24186;96958,4848;63280,16219;11784,60246;27037,92555;13414,19080;36705,32906;47136,75654;79834,15916;41403,33306;84250,19365;95642,42165;55154,63063;28537,18677;45884,80309;83226,24368;4494,80183;29215,84125;96401,57350;44370,39789;66256,74135;75221,2960;7040,22356;94965,86874;54623,36367;36531,55225;72084,32172;97389,27237;11586,42277;62265,73822;38937,45490;98189,59783;25672,43755;43907,38424;1104,88277;78213,67360;62411,69785;86671,85803;8492,81636;72676,63114;18002,9206;18338,6437;57729,32079;33674,85667;90707,95938;59488,29644;57780,57676;5778,83451;1430,49684;38227,18885;54312,32791;86244,33075;2575,72915;18877,11066;70902,7904;90531,5255;33461,25221;11692,91189;73651,61717;76855,64357;57654,36342;10352,31785;10369,16129;15236,28150;65813,69814;47035,36476;2604,49630;69550,5178;38896,88426;16243,9797;12681,23125;15052,46141;48345,43095;37330,21995;4811,30536;2704,62464;83230,13055;94249,93598;29184,25836;38100,11348;95649,85134;64175,14604;51115,33725;19781,90011;38502,52375;16159,51183;75499,31210;13675,40196;74304,51004;62190,79114;97892,64893;57930,81121;94300,68530;91070,39835;10717,29169;67534,22717;30654,31708;37320,81769;81784,57100;88131,20286;25826,4289;87820,17676;51851,1494;57871,42506;68850,36413;21620,66741;17657,95901;64213,11956;80782,71634;51790,91498;803,35675;14214,47808;67383,51533;45928,49166;24984,34058;85803,50809;54699,89974;68484,6549;91468,26355;49054,76669;79119,87025;59761,96775;82925,40325;8731,63706;11958,76872;71555,29112;12547,2120;76920,96281;53652,22847;45446,94987;73257,47601;45795,27955;37574,30631;50855,45393;56985,99908;22061,52455;86933,81821;49229,86209;22145,57959;66267,50455;51183,37821;79566,80081;56293,56485;76361,9944;95684,38158;4931,85292;85758,67077;29598,23332;97707,80452;68724,71043;80359,90785;23497,83643;88957,72726;69852,27454;47036,52470;77908,14570;6642,73825;94650,62934;46662,71010;89230,58697;25520,10512;43988,11277;77588,73585;34608,75295;54036,19684;62689,50746;26820,86186;34389,32128;75263,20592;59581,38650;73061,53840;53220,96054;44017,47869;58988,90678;35231,48217;49374,60750;58728,9713;88378,52667;83297,39338;44313,53684;59021,7002;4429,85840;9539,55169;17967,84801;75760,93900;39802,65172;64091,93021;61226,8107;57242,36565;15136,8824;1133,80861;85925,59860;90573,74302;28878,90221;13639,73191;43904,89011;96544,64685;74850,6082;19853,9169;7234,11965;19420,47035;93488,99862;56408,54713;24321,13649;7629,39456;22472,8761;36669,8396;68620,27241;99049,13850;33814,12688;87040,94069;1698,83583;75105,92900;89664,94958;18420,13249;23274,54191;76635,16761;54052,33042;87826,94724;46690,95454;34180,85513;4215,87200;10260,89186;30792,9309;3035,64605;38348,6426;58674,40045;90008,33778;49296,96023;45087,84067;9271,84712;38257,2258;17825,8661;35299,5650;3384,81989;17455,53915;83853,21669;41114,94113;27207,71906;19773,30241;52862,58120;36667,27887;14516,43026;61665,63812;39049,23103;64230,64671;7815,18839;66928,25639;27499,18579;47640,47234;16919,65094;1149,771;3115,58614;11235,30321;46871,31007;60561,16085;89126,13579;43971,3642;56605,21987;83805,12005;45090,48034;93027,69256;66872,76307;11246,10722;94885,75237;57956,11803;40330,75456;28925,43444;50421,40160;73764,13644;71166,50677;29728,76644;80607,73698;80285,53563;95685,64089;81919,57126;28474,74946;26381,11698;67604,53978;22419,78840;29214,80374;90642,69543;72181,359"

  // let ramiro = test.split(";")
  // let clay = ramiro.map(
  //   (element) => element.split(",")
  // )
  // let tchu = clay.map(
  //   (element) => element.map(
  //     (number) => Number.parseInt(number)
  //   )
  // )

  // let x = truckTour(tchu)
  // console.log("c", x)

  // x = truckTour2(tchu)
  // console.log("d", x)



  // let test = [
  // 'quyjjdcgsvvsgcdjjyq',
  // 'hgygsvlfwcwnswtuhmyaljkqlqjjqlqkjlaymhutwsnwcflvsgygh',
  // 'fgnfnidynhxebxxxfmxixhsruldhsaobhlcggchboashdlurshxixmfxxxbexhnydinfngf',
  // 'bsyhvwfuesumsehmytqioswvpcbxyolapfywdxeacyuruybhbwxjmrrmjxwbhbyuruycaexdwyfpaloyxbcpwsoiqtymhesmuseufwvhysb',
  // 'fvyqxqxynewuebtcuqdwyetyqqisappmunmnldmkttkmdlnmnumppasiqyteywdquctbeuwenyxqxqyvf',
  // 'mmbiefhflbeckaecprwfgmqlydfroxrblulpasumubqhhbvlqpixvvxipqlvbhqbumusaplulbrxorfdylqmgfwrpceakceblfhfeibmm',
  // 'tpqknkmbgasitnwqrqasvolmevkasccsakvemlosaqrqwntisagbmknkqpt',
  // 'lhrxvssvxrhl',
  // 'prcoitfiptvcxrvoalqmfpnqyhrubxspplrftomfehbbhefmotfrlppsxburhyqnpfmqlaorxcvtpiftiocrp',
  // 'kjowoemiduaaxasnqghxbxkiccikxbxhgqnsaxaaudimeowojk'
  // ]

  // for (let element of test){
  //   let x = palindromeIndex(element)
  //   let y = palindromeIndex2(element)
  //   let z = palindromeIndex3(element)
  //   console.log(x, y, z)
  // }

  // let x = [
  //   [100000, 1],
  //   [100001, 1],
  //   [877571, 322624],
  //   [740936, 848861],
  //   [697173, 136653],
  //   [702643, 709071],
  //   [359573, 552945],
  //   [293658, 296577],
  //   [809544, 419876],
  //   [810296, 256265],
  //   [867268, 611652],
  //   [913447, 81613],
  //   [511458, 5187],
  //   [501630, 628036],
  //   [798476, 194318],
  //   [650111, 70957],
  //   [702126, 396874],
  //   [795972, 50780],
  //   [890206, 886817],
  //   [338072, 27623],
  //   [375668, 578996],
  //   [94004, 438573],
  //   [578411, 672178],
  //   [35951, 328227],
  //   [465703, 155077],
  //   [542767, 982063],
  //   [286606, 839123],
  //   [590967, 860599],
  //   [30508, 250308],
  //   [37357, 38844],
  //   [822786, 303334],
  //   [360272, 537204],
  //   [127090, 326725],
  //   [522361, 828056],
  //   [770168, 271605],
  //   [215870, 965470],
  //   [623031, 457369],
  //   [85367, 842213],
  //   [51694, 194424],
  //   [531475, 411447],
  //   [540757, 699670],
  //   [637574, 138385],
  //   [726255, 132776],
  //   [976072, 969756],
  //   [516417, 714757],
  //   [323030, 41077],
  //   [795366, 398911],
  //   [270894, 433619],
  //   [439071, 744211],
  //   [78475, 250918],
  //   [25357, 184376],
  //   [962866, 80892],
  //   [836169, 428411],
  //   [696131, 688655],
  //   [409046, 58207],
  //   [173334, 915420],
  //   [156473, 442452],
  //   [250300, 239842],
  //   [549351, 93895],
  //   [714757, 182908],
  //   [660347, 934825],
  //   [279997, 638415],
  //   [955081, 516813],
  //   [738064, 657260],
  //   [554479, 435772],
  //   [611859, 730204],
  //   [419695, 47727],
  //   [247787, 566165],
  //   [356053, 158683],
  //   [758017, 120192],
  //   [14397, 341957],
  //   [116099, 91820],
  //   [46014, 94179],
  //   [40738, 311484],
  //   [855654, 979732],
  //   [703817, 175370],
  //   [474281, 17165],
  //   [97857, 763537],
  //   [491727, 807095],
  //   [473579, 346383],
  //   [173241, 464779],
  //   [433950, 649921],
  //   [398595, 48070],
  //   [615989, 949360],
  //   [635237, 886881],
  //   [45315, 260953],
  //   [374698, 15308],
  //   [626001, 933647],
  //   [503250, 501153],
  //   [856683, 539499]
  // ]

  // let expected = [
  //   2,
  //   2,
  //   1,
  //   2,
  //   1,
  //   1,
  //   1,
  //   2,
  //   2,
  //   2,
  //   2,
  //   1,
  //   2,
  //   2,
  //   2,
  //   1,
  //   2,
  //   2,
  //   2,
  //   2,
  //   2,
  //   2,
  //   1,
  //   1,
  //   1,
  //   1,
  //   2,
  //   1,
  //   2,
  //   1,
  //   2,
  //   2,
  //   2,
  //   1,
  //   2,
  //   2,
  //   1,
  //   1,
  //   2,
  //   1,
  //   1,
  //   2,
  //   1,
  //   2,
  //   1,
  //   2,
  //   2,
  //   2,
  //   1,
  //   1,
  //   1,
  //   2,
  //   1,
  //   1,
  //   2,
  //   2,
  //   1,
  //   2,
  //   1,
  //   1,
  //   1,
  //   1,
  //   1,
  //   2,
  //   1,
  //   1,
  //   1,
  //   1,
  //   1,
  //   1,
  //   1,
  //   1,
  //   2,
  //   2,
  //   2,
  //   1,
  //   1,
  //   1,
  //   1,
  //   1,
  //   1,
  //   2,
  //   1,
  //   1,
  //   1,
  //   1,
  //   2,
  //   1,
  //   2,
  //   1,
  // ]
  // for(let i = 0; i<90; i++){
  //   let result = towerBreakers(x[i][0], x[i][1])
  //   if (result !== expected[i]){
  //     console.log(i, x[i], expected[i], result)
  //   }
  // }
  // towerBreakers(877571, 322624)


  // let a = flippingMatrix([
  //   [112, 42, 83, 119],
  //   [56, 125, 56, 49],
  //   [15, 78, 101, 43],
  //   [62, 98, 114, 108]
  // ])
  // console.log(a)

  // diagonalDifference(
  //   [
  //     [11, 2, 4],
  //     [4, 5, 6],
  //     [10, 8, -12]
  //   ]
  // )

// ------------------- Time Conversion -------------------------
  // const result: string = timeConversion("12:40:22AM");
  // console.log(result);
}

main();
